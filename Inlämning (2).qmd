---
title: "Inlämning Tidsserieanalys"
format: html
editor: visual
---

Step 4 - ARMA

a\)

```{r}
Microsoft_stocks <- read.csv("Microsoft_Stock.csv")
Microsoft_stocks
```

Den valda datan är Microsofts aktiepris mellan datumen 1 april 2015 - 1 april 2021. Datan består av 6 variabler. Datan består av 6 variabler. Date är datumet för respektive aktiepris. Open representerar öppningspriset för aktien när marknaden öppnar. High representerar det högsta aktiepriser för den dagen. Low representerar det lägsta aktiepriset för den dagen. Close respresenterar avslutningspriset för aktien när marknaden stänger. Volume representerar antalet aktier som har omsatts/trejdats/förhandlats den dagen.

```{r}
close_ts <- ts(Microsoft_stocks$Close, 
               start = c(2015, 63),
               end = c(2021, 63),
               frequency = 252)
start(close_ts)
end(close_ts)
```

Vi förvandlar vår huvudvariabel "close" till en tidsserie, där vi anger start och slutdatum. Siffran 63 motsvarar den 1 april o handelsdagar, där helger och röda dagar alltså är borträknade.

```{r}
adf_test <- adf.test(close_ts)
print(adf_test)

close_ts_diff <- diff(close_ts)
adf_test_diff <- adf.test(close_ts_diff)
print(adf_test_diff)

close_ts_diff2 <- diff(close_ts_diff)
adf_test_diff2 <- adf.test(close_ts_diff2)
print(adf_test_diff2)
```

ADF-test (Augmentes Dickey-Fuller test), för att avgöra om tidsserien är stationär eller inte. En stationär tidsseriedata innebär att de statistiska egenskaperna som medelvärde, varians och autokorrelation inte förändras över tid. Då datan är större än 0,05 innebär det att den inte är stationär. Vi differentierar tidsserien 2 gånger för att göra den stationär. Differentiering innebär att vi beräknar förändringen från en period till nästa. (yt - (yt-1)).

```{r}
par(mfrow = c(1, 2))
acf(close_ts_diff2, main = "ACF")
pacf(close_ts_diff2, main = "PACF")
```

Vi använder ACF (autokorrelationsfunktion) och PACF (partiell autokorrelationsfunktion för att identifiera ordningen av AR (p) och MA (q).

```{r}
arma_model <- auto.arima(close_ts_diff2, seasonal = FALSE)
summary(arma_model)
```

```{r}
#Prognos med modellen
fitted_values <- fitted(arma_model)

#Plottar originaldata och anpassade värden
plot(close_ts, main = "Originaldata och ARMA Fitted Värden", ylab = "Close Pris", col = "blue")
lines(fitted_values, col = "red", lwd = 2)
legend("topleft", legend = c("Originaldata", "Fitted Värden"), col = c("blue", "red"), lwd = 2)
```

b\)

```{r}
#Kontrollerar residualerna
checkresiduals(arma_model)
```

Med ett p-värde på 0,9706 innebär det att vi måste förkasta nollhypotesen, alltså har residualerna ingen signifikant autokorrelation, då p-värdet är \> 0,05.

Residualplotten (övre bild) visar att främst ligger runt 0 vilket är ett bra tecken. Dock med en extrem outlier i slutet av serien, vilket verkar vara en avvikelse, om man inte skulle fortsätta tidsserien.

ACF-plotten visar att majoriteten av residualerna ligger inom de blå-streckade gränserna, vilket tyder på att det inte finns någon kvarvarande autokorrelation, vilket vårt p-värde även sa. Histogrammet verkar tyda på en normalfördelning, vilket är önskvärt.

------------------------------------------------------------------------

c\)

```{r}
rolling_forecast <- function(data,
    first_pred = time(data)[length(data) - 30],
    last_pred = time(data)[length(data)],
    steps_ahead = 1) 
  {
    end <- first_pred - 1/365 
    preds <- list()
    i <- 1
  
    while (end < (last_pred - 0.01)) {
        train <- window(data, end = end)
        model <- HoltWinters(train)
        preds[[i]] <- predict(model, n.ahead = steps_ahead)
        end <- end + 1/365
        i <- i + 1
    }
    all_preds <- ts(
        unlist(preds),
        start = first_pred,
        frequency = frequency(data))
  
    return(all_preds)}
```

```{r}
close_ts_rolling <- close_ts_diff2
forecast <- rolling_forecast(data=close_ts_rolling,
                             steps_ahead = 1)

forecast_hS <- rolling_forecast(
    data = close_ts_rolling,
    steps_ahead = 4)
```

```{r}
plot(forecast)
plot(forecast_hS)
```

```{r}
close_ts_trimmed <- ts(
  close_ts[1:(length(close_ts) - 30)],       
  start = start(close_ts),         
  frequency = frequency(close_ts)  
)

close_ts_trimmed_30 <- ts(
  close_ts[(length(close_ts) - 29):length(close_ts)],       
  start = time(close_ts)[length(close_ts) - 29],         
  frequency = frequency(close_ts)  
)


calc_metrics <- function(actual, predicted) {
    rmse <- sqrt(mean((actual - predicted)^2, na.rm = TRUE))
    mad <- mean(abs(actual - predicted), na.rm = TRUE)
    list(RMSE = rmse, MAD = mad)
}


metrics0 <- calc_metrics(actual = close_ts_trimmed_30, predicted = forecast)
metrics0
metrics1 <- calc_metrics(actual = close_ts_trimmed_30, predicted = forecast_hS)
metrics1
```

d\)

```{r}
alpha <- 0.05
z <- qnorm(1 - alpha / 2)

# plot
plot(close_ts_trimmed_30, col = "black", lwd = 2, main = "h = 1")
#lines(forecast, col = "blue", lwd = 2)

plot(close_ts_trimmed_30, col = "black", lwd = 2, main = "h = 1")
lines(forecast, col = "blue", lwd = 2)

#Konfidensintervall
forecast_upper <- forecast + z * sd(forecast, na.rm = TRUE)
forecast_lower <- forecast - z * sd(forecast, na.rm = TRUE)

#Plottar h = 1 med konfidensintervall
plot(close_ts_trimmed_30, col = "black", lwd = 2, main = "h = 1")
lines(forecast, col = "blue", lwd = 2)
lines(forecast_upper, col = "red", lty = 2)
lines(forecast_lower, col = "red", lty = 2)
```

e\) och f)

```{r}
random_walk <- ts(cumsum(rnorm(length(close_ts_trimmed_30), 
                               mean = (close_ts), 
                               sd = sd(close_ts))), 
                  start = start(close_ts_trimmed_30), 
                  frequency = frequency(close_ts_trimmed_30)
)

metrics_rw <- calc_metrics(actual = close_ts_trimmed_30, predicted = random_walk)
metrics_rw
```

ARMA-modellen ger ungefär RMSE 225, vilket är ett lägre värden än random-walk-modellen på ungefär 749, vilket tyder på en bättre modell. Även MAD så har ARMA-modellen lägre värde med ungefär 220 jämfört med ungefär 556, vilket också är ett bättre värde. Det tyder på att de riktiga värdena och avvikelserna i ARMA-modellen tenderar att vara närmare genomsnittet jämfört med random-walk-modellen.
